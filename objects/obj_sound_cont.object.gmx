<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>music_log=0;
music_is_playing=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//code for sound
if global.music=true {
    if room=rm_menu or room=rm_options or room=rm_shop or room=rm_more_bacon or room=rm_about {
        if music_is_playing=false &amp;&amp; !audio_is_playing(snd_piano_riff) &amp;&amp; !audio_is_playing(snd_piano_riff) {
            music_log=irandom(1);
            if music_log=0 {
                audio_play_sound(snd_piano_riff,10,true);
            }
            if music_log=1 {
                audio_play_sound(snd_output,10,true);
            }
            music_is_playing=true;
        }
        if audio_is_playing(snd_intensity) {
            audio_stop_sound(snd_intensity);
        }
    }
    else
    {
    if audio_is_playing(snd_piano_riff) {
        audio_stop_sound(snd_piano_riff);
    }
    if audio_is_playing(snd_output) {
        audio_stop_sound(snd_output);
    }
    music_is_playing=false;
    }
    
    if room=rm_game &amp;&amp; !global.multiplier&lt;=0 {
        if !audio_is_playing(snd_intensity) {
            audio_play_sound(snd_intensity,10,true);
        }
    }
    if room=rm_game &amp;&amp; global.multiplier&lt;=0 {
        if audio_is_playing(snd_intensity) {
            audio_stop_sound(snd_intensity);
        }
    }
}
else
{
if audio_is_playing(snd_piano_riff) {
    audio_stop_sound(snd_piano_riff);
}
if audio_is_playing(snd_output) {
    audio_stop_sound(snd_output);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
