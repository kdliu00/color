<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_splash</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize iaps
var map_create=true;
if file_exists("iap_data.json") {
   global.purchaseMap=ds_map_secure_load("iap_data.json");
   if ds_exists(global.purchaseMap,ds_type_map) {
      if os_type=os_macosx {
        var product1="com.tangentgamestudios.mac.bagofbacon";
        var product2="com.tangentgamestudios.mac.satchelofbacon";
        var product3="com.tangentgamestudios.mac.boxofbacon";
        var product4="com.tangentgamestudios.mac.truckloadofbacon";
        var product5="com.tangentgamestudios.mac.colornoads";
      }
      else
      {
      var product1="com.tangentgamestudios.bagofbacon";
      var product2="com.tangentgamestudios.satchelofbacon";
      var product3="com.tangentgamestudios.boxofbacon";
      var product4="com.tangentgamestudios.truckloadofbacon";
      var product5="com.tangentgamestudios.colornoads";
      }
      if ds_map_exists(global.purchaseMap,product1) &amp;&amp; ds_map_exists(global.purchaseMap,product2) &amp;&amp; ds_map_exists(global.purchaseMap,product3) &amp;&amp; ds_map_exists(global.purchaseMap,product4) &amp;&amp; ds_map_exists(global.purchaseMap,product5) {
         map_create=false;
      }  
   }
}

if map_create {
   global.purchaseMap=ds_map_create();
   if os_type=os_macosx {
      var product1="com.tangentgamestudios.mac.bagofbacon";
      var product2="com.tangentgamestudios.mac.satchelofbacon";
      var product3="com.tangentgamestudios.mac.boxofbacon";
      var product4="com.tangentgamestudios.mac.truckloadofbacon";
      var product5="com.tangentgamestudios.mac.colornoads";
   }
   else
   {
   var product1="com.tangentgamestudios.bagofbacon";
   var product2="com.tangentgamestudios.satchelofbacon";
   var product3="com.tangentgamestudios.boxofbacon";
   var product4="com.tangentgamestudios.truckloadofbacon";
   var product5="com.tangentgamestudios.colornoads";
   }
   ds_map_add(global.purchaseMap,product1,0);
   ds_map_add(global.purchaseMap,product2,0);
   ds_map_add(global.purchaseMap,product3,0);
   ds_map_add(global.purchaseMap,product4,0);
   ds_map_add(global.purchaseMap,product5,0);
   ds_map_secure_save(global.purchaseMap,"iap_data.json");
}

var pBagofBacon=ds_map_create();
var pSatchelofBacon=ds_map_create();
var pBoxofBacon=ds_map_create();
var pTruckloadofBacon=ds_map_create();
var pColorTapNoAds=ds_map_create();

var productList=ds_list_create();
if os_type=os_macosx {
   ds_map_add(pBagofBacon,"id","com.tangentgamestudios.mac.bagofbacon");
   ds_map_add(pSatchelofBacon,"id","com.tangentgamestudios.mac.satchelofbacon");
   ds_map_add(pBoxofBacon,"id","com.tangentgamestudios.mac.boxofbacon");
   ds_map_add(pTruckloadofBacon,"id","com.tangentgamestudios.mac.truckloadofbacon");
   ds_map_add(pColorTapNoAds,"id","com.tangentgamestudios.mac.colornoads");
}
else
{ 
ds_map_add(pBagofBacon,"id","com.tangentgamestudios.bagofbacon");
ds_map_add(pSatchelofBacon,"id","com.tangentgamestudios.satchelofbacon");
ds_map_add(pBoxofBacon,"id","com.tangentgamestudios.boxofbacon");
ds_map_add(pTruckloadofBacon,"id","com.tangentgamestudios.truckloadofbacon");
ds_map_add(pColorTapNoAds,"id","com.tangentgamestudios.colornoads");
}

ds_map_add(pBagofBacon,"title","Bag of Bacon");
ds_map_add(pSatchelofBacon,"title","Satchel of Bacon");
ds_map_add(pBoxofBacon,"title","Box of Bacon");
ds_map_add(pTruckloadofBacon,"title","Truckload of Bacon");
ds_map_add(pColorTapNoAds,"title","Color Tap No Ads");

ds_map_add(pBagofBacon,"type","Consumable");
ds_map_add(pSatchelofBacon,"type","Consumable");
ds_map_add(pBoxofBacon,"type","Consumable");
ds_map_add(pTruckloadofBacon,"type","Consumable");
ds_map_add(pColorTapNoAds,"type","Nonconsumable");

ds_list_add(productList,pBagofBacon);
ds_list_add(productList,pSatchelofBacon);
ds_list_add(productList,pBoxofBacon);
ds_list_add(productList,pTruckloadofBacon);
ds_list_add(productList,pColorTapNoAds);

iap_activate(productList);
ds_map_destroy(pBagofBacon);
ds_map_destroy(pSatchelofBacon);
ds_map_destroy(pBoxofBacon);
ds_map_destroy(pTruckloadofBacon);
ds_map_destroy(pColorTapNoAds);
ds_list_destroy(productList);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///global variables
show_debug_overlay(false);
if os_type = os_windows {
    winX = window_get_width();
    winY = window_get_height();
}
display_reset(0, true);
if os_type = os_windows {
    window_set_size(winX, winY);
}

global.firstTime=true;
pause=false;

//button selection variables
global.button5=false;
global.button6=false;
global.button7=false;
global.button8=false;
global.button9=false;

//randomize seed
randomize();

//fading stuff
global.to_fade=true;

//fonts
global.font_white=0;
global.font_white_s=0;
global.font_timer=0;

global.fade_out=false;
global.special_fade=false;
global.special_fade2=false;

//shop mechanics
global.button_frame=0;
global.background_frame=0;
global.powerup_frame=0;

global.fade_out=false;
global.active=true;
global.shop_active=true;
global.reset=false;

globalvar game;
game=false;
global.rng=-1;

globalvar double;
double=false;
global.derp=false;

global.x3rng=-1;
global.x4rng=-1;
global.x5rng=-1;

global.derp_rng=-1;
global.double_rng=-1;
global.pig_rng=-1;
global.point_multiplier=1;

global.color_id=-1;
global.color_id_check=-2;
global.points=0;
global.multiplier=100;

global.colors=59;
global.backgrounds=5;
scr_colors();

//powerup levels
global.double_level=1;
global.freeze_level=1;
global.money_earning_level=1;
global.instant_multiplier_level=1;
global.pig_level=1;

global.revive_used=false;
global.pig_yield=1;
global.timer_edit=3*room_speed;
global.point_boost_reset=0;

global.reset_highscores=true;

//defaults to be loaded
global.level=1;
global.old_level=1;

global.xxxOG = 0.87
global.xxx = global.xxxOG;
global.mult_assist=31;

globalvar timer;
timer=3*room_speed;
globalvar double_timer;
double_timer=3*room_speed;

global.derp_chance=96-global.freeze_level;
global.double_chance=94-global.double_level;
global.x3_chance=94-global.instant_multiplier_level;
global.x4_chance=96-global.instant_multiplier_level;
global.x5_chance=98-global.instant_multiplier_level;
global.pig_chance=100-global.pig_level;

global.money=0;
global.mult_money=57-(1.6*global.money_earning_level);
global.bacon=0;
global.music=true;
global.sfx=true;
global.highscore=0;

//color packs
global.cp1_available=false;
global.cp2_available=false;
global.cp3_available=false;
global.pp1_available=false;
global.pp2_available=false;
global.pp3_available=false;
global.pp4_available=false;
global.rp1_available=false;
global.rp2_available=false;
global.sp1_available=false;
global.old_available=false;
global.ap1_available=false;
global.tc1_available=false;
global.wf1_available=false;

global.bg1_available=false;
global.bg2_available=false;
global.bg3_available=false;
global.bg4_available=false;
global.bg5_available=false;
global.bg6_available=false;
global.bg7_available=false;
global.bg8_available=false;
global.bg9_available=false;
global.bg10_available=false;

scr_inv_color();
scr_inv_background();

global.bg_select=0;
global.selected_color_id_match=global.color[0];

global.last_month=0;
global.last_day=0;

global.noads = false;

scr_load();

if global.reset_highscores=true {
    global.highscore=0;
    global.level=5;
    global.reset_highscores=false;
}

global.old_money=global.money;
global.old_bacon=global.bacon;

//time implements
if date_get_timezone() != timezone_utc {
   date_set_timezone(timezone_utc);
}

global.font_white_s=font_add_sprite_ext(spr_font_white_s,"0123456789abcdefghijklmnopqrstuvwxyz+!",true,2);

//ads
if global.noads = false {
    //AdColony_Init("app4c5bb971c8c94e519a", "vzfd60cde1c2a349eabf", "v4vc30196b772f31494192");
    
    GoogleMobileAds_Init("ca-app-pub-1590690452411246/6467938616");//banner
    
    bannerAdded = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///splash
image_alpha = 1;
splash = 0.03;

achievement_login();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>splash = -0.03;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = rm_boot {
    visible = true;
    image_alpha += splash;
    if image_alpha &gt;= 1 &amp;&amp; splash!= 0 {
        splash = 0;
        alarm[0] = 1.5 * room_speed;
    } else if image_alpha &lt;= 0 {
        room_goto(rm_menu);
    }
} else {
    sprite_index = spr_blank;
    if global.noads = false {
        if bannerAdded = false {
            GoogleMobileAds_AddBannerAt("ca-app-pub-1590690452411246/6467938616", GoogleMobileAds_Full_Banner, -1, -1);
            bannerAdded = true;
        }
    }
}

if global.active=true {
    if game=true &amp;&amp; room=rm_game &amp;&amp; pause=false &amp;&amp; global.firstTime=false {
        if global.multiplier&gt;0 &amp;&amp; global.derp=false {
            global.xxx+=0.0004;
            if !(global.multiplier-global.xxx)&lt;=0 {
                global.multiplier-=global.xxx;
            }
            else
            {
            global.multiplier=0;
            }
        }
    }
}
if global.music == false {
    audio_stop_sound(snd_intensity);
    audio_stop_sound(snd_piano_riff);
}
if global.highscore&gt;=7000 {
    global.level=2;
}
if global.highscore&gt;=11000 {
    global.level=3;
}
if global.highscore&gt;=14000 {
    global.level=4;
}
if global.highscore&gt;=17500 {
    global.level=5;
}
if global.highscore&gt;=20000 {
    global.level=6;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="71">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var type = ds_map_find_value(async_load, "type");
var status = ds_map_find_value(async_load, "status");
if status = 0 {
   //error of some kind
   var error = ds_map_find_value(async_load, "error");
} else {
   if type = "register" {
      global.reg_id = ds_map_find_value(async_load, "reg_id");
   } else {
      var data = ds_map_find_value(async_load, "data");
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ads
var ident = ds_map_find_value(async_load, "type" );
var loaded = ds_map_find_value(async_load, "loaded");
if ident == "banner_load" {
    if loaded {
        var bh = ds_map_find_value(async_load, "height");
        var py = display_get_height() - bh;
        GoogleMobileAds_MoveBanner(0, py);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="66">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///iap event
var val=ds_map_find_value(iap_data,"type");
switch (val) {
    case iap_ev_purchase:
        var map=ds_map_create();
        var purchase_id=ds_map_find_value(iap_data,"index");
        iap_purchase_details(purchase_id,map);
        if ds_map_find_value(map,"status")=iap_purchased {
        var product_id=ds_map_find_value(map,"product");
        ds_map_replace(global.purchaseMap,product_id,1);
        switch (product_id) {
            case "com.tangentgamestudios.bagofbacon":
            case "com.tangentgamestudios.mac.bagofbacon":
                iap_consume(product_id);
            break;
            case "com.tangentgamestudios.satchelofbacon":
            case "com.tangentgamestudios.mac.satchelofbacon":
                iap_consume(product_id);
            break;
            case "com.tangentgamestudios.boxofbacon":
            case "com.tangentgamestudios.mac.boxofbacon":
                iap_consume(product_id);
            break;
            case "com.tangentgamestudios.truckloadofbacon":
            case "com.tangentgamestudios.mac.truckloadofbacon":
                iap_consume(product_id);
            break;
            case "com.tangentgamestudios.colornoads":
            case "com.tangentgamestudios.mac.colornoads":
                ads_disable(0);
                global.noads = true;
                GoogleMobileAds_RemoveBanner();
                scr_save();
            break;
            }
        }
        ds_map_destroy(map);
    break;
    case iap_ev_consume:
        var product_id=ds_map_find_value(iap_data,"product");
        if ds_map_find_value(iap_data,"consumed") {
            ds_map_replace(global.purchaseMap,product_id,0);
            switch (product_id) {
                case "com.tangentgamestudios.bagofbacon":
                case "com.tangentgamestudios.mac.bagofbacon":
                    global.bacon+=100;
                break;
                case "com.tangentgamestudios.satchelofbacon":
                case "com.tangentgamestudios.mac.satchelofbacon":
                    global.bacon+=250;
                break;
                case "com.tangentgamestudios.boxofbacon":
                case "com.tangentgamestudios.mac.boxofbacon":
                    global.bacon+=750;
                break;
                case "com.tangentgamestudios.truckloadofbacon":
                case "com.tangentgamestudios.mac.truckloadofbacon":
                    global.bacon+=2000;
                break;
            }
        }
    break;
    case iap_ev_restore:
        var result = ds_map_find_value(iap_data,"result");
        if result = true {
            show_message("Purchases successfully restored!");
        } else {
            show_message("Sorry, unable to restore purchases!");
        }
    break;
}
scr_save();
ds_map_secure_save(global.purchaseMap,"iap_data.json");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_save();
global.points=0;
if font_exists(global.font_white) {
    font_delete(global.font_white);
}
if font_exists(global.font_white_s) {
    font_delete(global.font_white_s);
}
if font_exists(global.font_timer) {
    font_delete(global.font_timer);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_save();
global.points=0;
global.xxx=0.35;
if font_exists(global.font_white) {
    font_delete(global.font_white);
}
if font_exists(global.font_white_s) {
    font_delete(global.font_white_s);
}
if font_exists(global.font_timer) {
    font_delete(global.font_timer);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = rm_boot {
    draw_self()
}

if global.firstTime=true &amp;&amp; game=true &amp;&amp; room=rm_game &amp;&amp; !instance_exists(obj_play_timer_cont) {
    pause=true;
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_set_font(global.font_white_s);
    switch (global.rng) {
        case 0:
        draw_text(obj_button_1.x, obj_button_1.y, "press#here");
        break;
        
        case 1:
        draw_text(obj_button_2.x, obj_button_2.y, "press#here");
        break;
        
        case 2:
        draw_text(obj_button_3.x, obj_button_3.y, "press#here");
        break;
        
        case 3:
        draw_text(obj_button_4.x, obj_button_4.y, "press#here");
        break;
    }
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///(progress.sav) reset [d]

/*file_delete("progress.sav");
global.reset=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
